# -*- coding: utf-8 -*-
"""SPH Imaging and analysis.ipynb

Automatically generated by Colab.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

df = pd.read_csv('/content/log.txt', sep='\s+', header=1, names=['x', 'y', 'z','vx','vy','vz','u','rho'])

x = df['x']
y = df['y']
z = df['z']
vx = df['vx']
vy = df['vy']
vz = df['vz']
densities = df['rho']

#Resolution
r = 80

xyz = np.vstack([x, y, z])

# KDE with energy weighting
kde = gaussian_kde(xyz)

# Grid setup
res = 1j * r
x_min, x_max = x.min(), x.max()
y_min, y_max = y.min(), y.max()
z_min, z_max = z.min(), z.max()

x_grid, y_grid, z_grid = np.mgrid[x_min:x_max:res, y_min:y_max:res, z_min:z_max:res]
positions = np.vstack([x_grid.ravel(), y_grid.ravel(), z_grid.ravel()])
#density = kde(positions).reshape(x_grid.shape)
top_down_density = density.sum(axis=2)

# Vector field: bin and average vx, vy per XY cell
x_bins = np.linspace(x_min, x_max, r)
y_bins = np.linspace(y_min, y_max, r)
x_idx = np.digitize(x, x_bins) - 1
y_idx = np.digitize(y, y_bins) - 1

U = np.zeros((r-1, r-1))
V = np.zeros((r-1, r-1))
M = np.zeros((r-1, r-1))  # magnitude
counts = np.zeros((r-1, r-1))

for xi, yi, vxi, vyi in zip(x_idx, y_idx, vx, vy):
    if 0 <= xi < r-1 and 0 <= yi < r-1:
        U[xi, yi] += vxi
        V[xi, yi] += vyi
        M[xi, yi] += np.hypot(vxi, vyi)
        counts[xi, yi] += 1

# Avoid divide-by-zero
counts[counts == 0] = 1
U /= counts
V /= counts
M /= counts

# Normalize vectors for direction only
magnitude = np.hypot(U, V)
U_norm = np.divide(U, magnitude, out=np.zeros_like(U), where=magnitude!=0)
V_norm = np.divide(V, magnitude, out=np.zeros_like(V), where=magnitude!=0)

# Meshgrid for quiver
Xc, Yc = np.meshgrid(x_bins[:-1] + np.diff(x_bins) / 2,
                     y_bins[:-1] + np.diff(y_bins) / 2, indexing='ij')

# Plot
plt.figure(figsize=(9, 6))
plt.imshow(top_down_density.T, origin='lower', extent=[x_min, x_max, y_min, y_max],
           cmap='inferno', aspect='auto')
plt.colorbar(label='Integrated Density')

# Use color for magnitude
quiv = plt.quiver(Xc, Yc, U_norm, V_norm, M, cmap='Oranges', scale=50, width=0.003)
plt.colorbar(quiv, label='Average Velocity Magnitude')

plt.title("Test Plot")
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(-40000,40000)
plt.ylim(-25000,45000)
plt.tight_layout()
plt.show()

